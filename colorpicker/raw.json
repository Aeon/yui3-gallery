{"majorversion": 3, "filemap": {"colorpicker.js": {"classlist": ["Y.Colors", "Y.ColorPicker", "Y.ColorPalette"], "name": "colorpicker.js", "module": "gallery-colorpicker"}}, "modules": {"gallery-colorpicker": {"description": "<p>The Color Picker Widget provides a HTML5 based UI for selecting a color\r\nfrom the HSL color space.</p>\r\n<p><strong>Note:</strong> ColorPicker uses the Canvas element to render the dynamic\r\ncolor sliders, as such it <strong>requires HTML5 support</strong>, so <em>Internet Explorer\r\nversions prior to version 9 will not work with this widget</em>.</p>\r\n<p> To use the Color Picker Widget, simply add a reference to it in your\r\n<code>use()</code> statement, and then instantiate an instance of the widget\r\nand render it to a node.</p>\r\n<p>\r\n<code>\r\n&#60;script type=\"text/javascript\"&#63;<br/>\r\n// Call the 'use' method passing in \"gallery-colorpicker\". This will load<br/>\r\n// the script and CSS for the Color Picker Widget and all of the required<br/>\r\n// dependencies\r\n<br>\r\nYUI().use(\"gallery-colorpicker\", function (Y) { <br/>\r\n// create an instance of the widget <br/>\r\nvar colorpicker = new Y.ColorPicker(); <br/>\r\n// render the widget into the #picker node<br/>\r\ncolorpicker.render(\"#picker\");<br/>\r\nY.on('#getcolorbutton',function(ev) {<br/>\r\nev.halt();<br/>\r\nvar hex = colorpicker.get('hex');<br/>\r\n// do something with the hex value....<br/>\r\n});<br/>\r\n}\r\n</code>\r\n</p>", "submodules": [], "classlist": ["Y.Colors", "Y.ColorPicker", "Y.ColorPalette"], "filelist": ["colorpicker.js"], "subdata": {}, "requires": "node, event, widget, classnamemanager", "name": "gallery-colorpicker"}}, "classmap": {"Y.ColorPicker": {"name": "Y.ColorPicker", "namespace": "Y", "module": "gallery-colorpicker", "properties": {"barPaddingY": {"description": "Vertical padding between color bars.", "default": "5", "protected": "", "guessedname": "barPaddingY", "guessedtype": "property", "type": "Number"}, "lCachePixels": {"protected": "", "type": "Object", "description": "An in-memory cache of the lightness bar images. Only used if cacheBars is enabled.", "guessedname": "lCachePixels", "guessedtype": "property"}, "color": {"description": "The current color selected by the picker in HSL object format.", "default": "{h: 0, s: 1.0, l: 0.5}", "protected": "", "guessedname": "color", "guessedtype": "property", "type": "Object"}, "sCachePixels": {"protected": "", "type": "Object", "description": "An in-memory cache of the saturation bar images. Only used if cacheBars is enabled.", "guessedname": "sCachePixels", "guessedtype": "property"}, "squareCachePixels": {"protected": "", "type": "Object", "description": "An in-memory cache of the color selector area. Only used if cacheBars is enabled.", "guessedname": "squareCachePixels", "guessedtype": "property"}, "barPaddingX": {"description": "Horizontal padding between color bars.", "default": "5", "protected": "", "guessedname": "barPaddingX", "guessedtype": "property", "type": "Number"}}, "file": "colorpicker.js", "shortname": "ColorPicker", "configs": {"squareWidth": {"default": "150", "type": "Number", "description": "The width of the color selector area in pixels", "guessedname": "squareWidth", "guessedtype": "property"}, "swatchHeight": {"default": "34", "type": "Number", "description": "The height of the color swatch in pixels", "guessedname": "swatchHeight", "guessedtype": "property"}, "showRGB": {"default": "true", "type": "Boolean", "description": "Controls visibility of the Red, Green and Blue text boxes, allowing manual selection of specific values.", "guessedname": "showRGB", "guessedtype": "property"}, "showHSLBars": {"default": "true", "type": "Boolean", "description": "Controls visibility of the Hue, Saturation and Lightness color bars from which colors can be selected.", "guessedname": "showHSLBars", "guessedtype": "property"}, "swatchWidth": {"default": "110", "type": "Number", "description": "The width of the color swatch in pixels", "guessedname": "swatchWidth", "guessedtype": "property"}, "hex": {"default": "'FF0000'", "type": "String", "description": "Gets or sets the selected color of the picker using HEX notation, e.g. <code>FFFFFF</code>", "guessedname": "hex", "guessedtype": "property"}, "showHEX": {"default": "true", "type": "Boolean", "description": "Controls visibility of the HEX text box.", "guessedname": "showHEX", "guessedtype": "property"}, "hsl": {"default": "{h: 0, s: 1, l: 0.5}", "type": "Object", "description": "Gets or sets the selected color of the picker using HSL floating point object notation, <code>{ h: 1.0, s: 0, l: 1.0 }</code>.\r\nAll values are normalized in the range 0 - 1.", "guessedname": "hsl", "guessedtype": "property"}, "barWidth": {"default": "20", "type": "Number", "description": "The width of the color bars in pixels", "guessedname": "barWidth", "guessedtype": "property"}, "cacheBars": {"default": "false", "type": "Boolean", "description": "Controls if the color bars should be cached in memory. New color bars are generated as the Hue and Saturation values change,\r\nthese generated images will be saved in memory if cacheBars is enabled. This may marginally increase performance at the\r\ncost of memory usage. Disabled by default.", "guessedname": "cacheBars", "guessedtype": "property"}, "rgb": {"default": "{r: 255, g: 0, b: 0}", "type": "Object", "description": "Gets or sets the selected color of the picker using RGB object notation, <code>{ r: 255, g: 0, b: 255 }</code>", "guessedname": "rgb", "guessedtype": "property"}, "showSwatch": {"default": "true", "type": "Boolean", "description": "Controls visibility of the color swatch area which displays the current color.", "guessedname": "showSwatch", "guessedtype": "property"}, "barHeight": {"default": "150", "type": "Number", "description": "The height of the color bars in pixels", "guessedname": "barHeight", "guessedtype": "property"}, "showHSL": {"default": "true", "type": "Boolean", "description": "Controls visibility of the Hue, Saturation and Lightness text boxes, allowing manual selection of specific values.", "guessedname": "showHSL", "guessedtype": "property"}, "squareHeight": {"default": "150", "type": "Number", "description": "The height of the color selector area in pixels", "guessedname": "squareHeight", "guessedtype": "property"}, "strings": {"default": "{ hValue: 'H', sValue: 'S', lValue: 'L', rValue: 'R', gValue: 'G', bValue: 'B', hexValue: 'Hex' }", "type": "Object", "description": "Sets the strings used for the labels on the text boxes, the available properties are <code>'hValue', 'sValue', 'lValue',\r\n'rValue', 'gValue', 'bValue', 'hexValue'</code>.", "guessedname": "strings", "guessedtype": "property"}, "hslInt": {"default": "{h: 0, s: 100, l: 50}", "type": "Object", "description": "Gets or sets the selected color of the picker using HSL integer object notation, <code>{ h: 360, s: 0, l: 100 }</code>.\r\nHue is represented in the range 0 - 360, saturation and lightness are in the range 0 - 100.", "guessedname": "hslInt", "guessedtype": "property"}}, "description": "ColorPicker is a widget that provides a HTML5 based canvas interface to selecting colors\r\nusing the HSL format. It provides a thumb from which to select colors as well as sliders\r\nand text areas for manually entering values.\r\nYou can retrieve the currently selected color through a variety of properties, allowing\r\nyou to select colors in HSL, RGB and Hex formats."}, "Y.Colors": {"name": "Y.Colors", "namespace": "Y", "module": "gallery-colorpicker", "guessedname": "Colors", "methods": {"_hue2rgb": {"protected": "", "description": "Internal method used for converting for HSL to RGB.", "guessedname": "_hue2rgb", "guessedtype": "function"}, "hslToRGB": {"return": {"type": "object", "description": "the color in RGB format, returned as an object of the\r\nform <code>&#123; r: 255, g: 0, b: 0 &#125;</code>. The RGB values are normalised in the\r\nrange 0-255."}, "description": "Converts HSL values in the range 0-1 to RGB format in the range 0-255.", "params": [{"type": "Number", "name": "h", "description": " hue component of the color in the range 0-1"}, {"type": "Number", "name": "s", "description": " saturation component of the color in the range 0-1"}, {"type": "Number", "name": "l", "description": " lightness component of the color in the range 0-1"}], "guessedname": "hslToRGB", "guessedtype": "function", "public": ""}, "rgbToHSL": {"return": {"type": "object", "description": "the color in HSL format, returned as an object of the\r\nform <code>&#123; h: 1.0, s: 0.5, l: 0.5 &#125;</code>. The HSL values are normalised in the\r\nrange 0-1."}, "description": "Converts RGB values in the range 0-255 to HSL format in the range 0-1.", "params": [{"type": "Number", "name": "r", "description": " red component of the color in the range 0-255"}, {"type": "Number", "name": "g", "description": " green component of the color in the range 0-255"}, {"type": "Number", "name": "b", "description": " blue component of the color in the range 0-255"}], "guessedname": "rgbToHSL", "guessedtype": "function", "public": ""}}, "file": "colorpicker.js", "guessedtype": "property", "shortname": "Colors", "description": "The Colors class provides simple color conversion functionality. It currently\r\nsupports HSL to RGB conversions and vice versa. The conversion methods are\r\nused directly, e.g. <a href=\"Y.Colors.html#method_hslToRGB\"><code>\r\nY.Colors.hslToRGB(1.0,1.0,1.0);</code></a>"}, "Y.ColorPalette": {"name": "Y.ColorPalette", "namespace": "Y", "module": "gallery-colorpicker", "properties": {"colors": {"default": "[]", "type": "Array", "description": "An array of colors stored in the palette", "guessedname": "colors", "guessedtype": "property"}}, "methods": {"onSwatchClick": {"protected": "", "params": [{"type": "Object", "name": "ev", "description": " the click event."}], "description": "Handler for the moment when a swatch in the palette is clicked. This handler fires the 'palette:selected' event.", "guessedname": "onSwatchClick", "guessedtype": "function"}, "addColor": {"params": [{"type": "Object", "name": "color", "description": "  the color to add, in HSL float object format e.g. <code>&#123; h: 1.0, s: 1.0, l: 0.5 &#125;</code>"}], "description": "Adds the specified color to the palette if it doesn't already exist.", "guessedname": "addColor", "guessedtype": "function"}, "colorExists": {"return": {"type": "Boolean", "description": "true if the color already exists in the palette"}, "params": [{"type": "Object", "name": "color", "description": "  the color to test, in HSL float object format e.g. <code>&#123; h: 1.0, s: 1.0, l: 0.5 &#125;</code>"}], "description": "Returns true if the specified color (in HSL float object format) already exists in the palette", "guessedname": "colorExists", "guessedtype": "function"}}, "file": "colorpicker.js", "shortname": "ColorPalette", "events": {"palette:selected": {"params": [{"type": "Object", "name": "color", "description": " An object containing the color in RGB and HSL format e.g. <code>&#123; rgb: &#123; r: 255, g: 0, b: 0 &#125;, hsl: &#123; h: 1.0, s: 0.5, l: 1.0 &#125; &#125;</code>"}], "description": "An event fired when a color in the palette is clicked upon."}}, "description": "ColorPalette provides a simple interface for storing and reusing selected colors. It can be coupled with the ColorPicker widget to provide\r\na simple history of selected colors."}}, "version": "1.0.0", "namespaces": ["Y"]}